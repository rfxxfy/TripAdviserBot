import re
from helpers.validators import is_valid_coordinate
from aiogram import types
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from loader import rag_service
from states.travel_states import TravelForm
from keyboards.inline_keyboards import (
    PHOTO_OPTIONS, CUISINE_OPTIONS,
    get_photo_locations_keyboard,
    get_cuisine_keyboard,
    get_first_time_keyboard
)
from database.db import (
    start_session, save_location, save_photo_location,
    save_cuisine, save_route_parameters, complete_session
)
from LLM.llm import generate_route

async def start_parameter_collection(
    callback: types.CallbackQuery,
    selected_routes: dict,
    state: FSMContext
):
    data = await state.get_data()
    session_id = data.get("session_id")
    if not session_id:
        session_id = start_session(callback.from_user.id)
        await state.update_data(session_id=session_id)

    questions = ["location", "budget", "days", "first_time"]
    if selected_routes.get("photo"):
        questions.append("photo")
    if selected_routes.get("food"):
        questions.append("food")

    await state.update_data(
        selected_routes=selected_routes,
        questions_order=questions,
        question_index=0
    )

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    msg = await callback.message.answer(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        reply_markup=kb
    )
    await state.update_data(last_message_with_keyboard_id=msg.message_id)
    await state.set_state(TravelForm.waiting_for_location)
    await callback.answer()


async def ask_next_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order = data.get("questions_order", [])
    idx = data.get("question_index", 0)

    last_id = data.get("last_message_with_keyboard_id")
    if last_id:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=last_id,
                reply_markup=None
            )
        except TelegramBadRequest:
            pass

    if idx >= len(order):
        await finish_parameters_collection(message, state)
        return

    step = order[idx]
    if step == "budget":
        await message.answer(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(TravelForm.waiting_for_budget)

    elif step == "photo":
        await message.answer(
            "üì∏ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ñ–æ—Ç–æ‚Äë–ª–æ–∫–∞—Ü–∏–∏:",
            reply_markup=get_photo_locations_keyboard([], PHOTO_OPTIONS)
        )
        await state.set_state(TravelForm.waiting_for_photo_locations)

    elif step == "food":
        await message.answer(
            "üçΩÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∫—É—Ö–Ω–∏:",
            reply_markup=get_cuisine_keyboard([], CUISINE_OPTIONS)
        )
        await state.set_state(TravelForm.waiting_for_cuisine)

    elif step == "days":
        await message.answer("üìÜ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å?")
        await state.set_state(TravelForm.waiting_for_days)

    elif step == "first_time":
        await message.answer(
            "üèôÔ∏è –í—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ—Å–µ—â–∞–µ—Ç–µ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥?",
            reply_markup=get_first_time_keyboard()
        )
        await state.set_state(TravelForm.waiting_for_first_time)

    else:
        await finish_parameters_collection(message, state)


async def process_location(message: types.Message, state: FSMContext):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ —Ç–µ–∫—Å—Ç. –ó–¥–µ—Å—å –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    remove-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–±–µ—Ä—ë—Ç —Å–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è ask_next_question.
    """
    data = await state.get_data()
    session_id = data.get("session_id")

    if message.location:
        lat, lon = message.location.latitude, message.location.longitude
        loc = f"{lat}, {lon}"
        await state.update_data(location=loc)
        save_location(session_id, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", lat, lon)
    else:
        text = message.text.strip()
        if is_valid_coordinate(text):
            lat, lon = re.split(r'[,\s]+', text)
            loc = (float(lat), float(lon))
            await state.update_data(location=loc)
            save_location(session_id, text, lat, lon)
        else:
            cords = rag_service.get_coordinates(text)
            if not cords:
                await message.answer(
                    "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–æ—á–Ω–µ–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."
                )
                return
            await state.update_data(location=text, coords=cords)
            save_location(session_id, text, cords[0], cords[1])

    await state.update_data(question_index=data.get("question_index", 0) + 1)
    await ask_next_question(message, state)

async def process_budget(message: types.Message, state: FSMContext):
    try:
        b = float(message.text)
        if b < 0:
            raise ValueError
        if b > 1e6:
            b = 1e6
    except ValueError:
        await message.answer("üö® –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±—é–¥–∂–µ—Ç–∞.")
        return

    await state.update_data(budget=b)
    data = await state.get_data()
    await state.update_data(question_index=data.get("question_index", 0) + 1)
    await ask_next_question(message, state)


async def toggle_photo_locations(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sel = data.get("photo_locations", [])
    _, opt = callback.data.split(":", 1)
    if opt == "all":
        sel = [] if len(sel) == len(PHOTO_OPTIONS) else PHOTO_OPTIONS.copy()
    else:
        if opt in sel:
            sel.remove(opt)
        else:
            sel.append(opt)
    await state.update_data(photo_locations=sel)
    try:
        await callback.message.edit_reply_markup(
            reply_markup=get_photo_locations_keyboard(sel, PHOTO_OPTIONS)
        )
    except TelegramBadRequest:
        pass
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ!")


async def confirm_photo_locations(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    data = await state.get_data()
    for loc in data.get("photo_locations", []):
        save_photo_location(data.get("session_id"), loc)
    await callback.answer("–§–æ—Ç–æ‚Äë–ª–æ–∫–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await state.update_data(question_index=data.get("question_index", 0) + 1)
    await ask_next_question(callback.message, state)


async def toggle_cuisine(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sel = data.get("cuisine_options", [])
    _, opt = callback.data.split(":", 1)
    if opt == "all":
        sel = [] if len(sel) == len(CUISINE_OPTIONS) else CUISINE_OPTIONS.copy()
    else:
        if opt in sel:
            sel.remove(opt)
        else:
            sel.append(opt)
    await state.update_data(cuisine_options=sel)
    try:
        await callback.message.edit_reply_markup(
            reply_markup=get_cuisine_keyboard(sel, CUISINE_OPTIONS)
        )
    except TelegramBadRequest:
        pass
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ!")


async def confirm_cuisine(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    data = await state.get_data()
    for c in data.get("cuisine_options", []):
        save_cuisine(data.get("session_id"), c)
    await callback.answer("–ö—É—Ö–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await state.update_data(question_index=data.get("question_index", 0) + 1)
    await ask_next_question(callback.message, state)


async def process_days(message: types.Message, state: FSMContext):
    try:
        d = int(message.text)
        if not (1 <= d <= 7):
            raise ValueError
    except ValueError:
        await message.answer("üö® –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7 –¥–ª—è –¥–Ω–µ–π.")
        return
    await state.update_data(days=d)
    data = await state.get_data()
    await state.update_data(question_index=data.get("question_index", 0) + 1)
    await ask_next_question(message, state)


async def process_first_time(callback: types.CallbackQuery, state: FSMContext):
    _, ans = callback.data.split(":", 1)
    await state.update_data(is_first_time=(ans == "yes"))
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–°–ø–∞—Å–∏–±–æ!")
    data = await state.get_data()
    await state.update_data(question_index=data.get("question_index", 0) + 1)
    await ask_next_question(callback.message, state)


async def finish_parameters_collection(message: types.Message, state: FSMContext):
    data = await state.get_data()
    session_id = data.get("session_id")
    save_route_parameters(session_id, data.get("budget"), data.get("days"))
    complete_session(session_id)

    resp = (
        "‚úÖ –°–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {data.get('location')}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {data.get('budget')} —Ä—É–±.\n"
        f"üìÜ –î–Ω–µ–π: {data.get('days')}\n"
    )
    if data["selected_routes"].get("photo"):
        resp += f"üì∏ –õ–æ–∫–∞—Ü–∏–∏: {', '.join(data.get('photo_locations', []))}\n"
    if data["selected_routes"].get("food"):
        resp += f"üçΩÔ∏è –ö—É—Ö–Ω–∏: {', '.join(data.get('cuisine_options', []))}\n"
    resp += "\n–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ ‚è≥"

    await message.answer(resp)

    llm = generate_route(
        departure=str(data.get("location")),
        preferences=data.get("photo_locations", []) + data.get("cuisine_options", []),
        route_type=" –∏ ".join([
            t for t in (
                "–∂–∏–≤–æ–ø–∏—Å–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏" if data["selected_routes"].get("photo") else "",
                "–ø–∏—Ç–∞–Ω–∏–µ–º" if data["selected_routes"].get("food") else ""
            ) if t
        ]),
        days=int(data.get("days")),
        budget=float(data.get("budget")),
        is_first_time=data.get("is_first_time", True)
    )
    await message.answer(llm, parse_mode="HTML")
    await state.clear()
