"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

import re
from aiogram import types
from loader import rag_service
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from states.travel_states import TravelForm
from keyboards.inline_keyboards import get_photo_locations_keyboard, get_back_to_main_keyboard, PHOTO_OPTIONS, CUISINE_OPTIONS, get_cuisine_keyboard
from database.db import start_session, save_route_parameters, complete_session, save_location, save_photo_location, save_cuisine

async def start_parameter_collection(
        callback: types.CallbackQuery,
        selected_routes: dict,
        state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤.
    –ó–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é/–∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """

    data = await state.get_data()
    session_id = data.get("session_id")
    if not session_id:
        session_id = start_session(callback.from_user.id)
        await state.update_data(session_id=session_id)
        print(f"Session_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {session_id}")
    
    questions_order = ["location", "budget", "days"]
    if selected_routes.get("photo"):
        questions_order.append("photo")
    if selected_routes.get("food"):
        questions_order.append("food")

    await state.update_data(
        selected_routes=selected_routes,
        questions_order=questions_order,
        question_index=0
    )

    message = await callback.message.answer(
        "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=get_back_to_main_keyboard()
    )
    await state.update_data(last_message_with_keyboard_id=message.message_id)
    await state.set_state(TravelForm.waiting_for_location)
    await callback.answer()


async def ask_next_question(message: types.Message, state: FSMContext):
    """
    –ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    data = await state.get_data()
    questions_order = data.get("questions_order", [])
    index = data.get("question_index", 0)

    last_keyboard_id = data.get("last_message_with_keyboard_id")
    if last_keyboard_id:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=last_keyboard_id,
                reply_markup=None
            )
        except Exception:
            pass

    if index >= len(questions_order):
        await finish_parameters_collection(message, state)
        return

    next_question = questions_order[index]
    if next_question == "budget":
        await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö:")
        await state.set_state(TravelForm.waiting_for_budget)
    elif next_question == "photo":
        await message.answer(
            "üì∏ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ñ–æ—Ç–æ‚Äë–ª–æ–∫–∞—Ü–∏–∏:",
            reply_markup=get_photo_locations_keyboard([], PHOTO_OPTIONS)
        )
        await state.set_state(TravelForm.waiting_for_photo_locations)
    elif next_question == "food":
        await message.answer(
            "üçΩÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∫—É—Ö–Ω–∏:",
            reply_markup=get_cuisine_keyboard([], CUISINE_OPTIONS)
        )
        await state.set_state(TravelForm.waiting_for_cuisine)
    elif next_question == "days":
        await message.answer("üìÜ –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å?")
        await state.set_state(TravelForm.waiting_for_days)
    else:
        await finish_parameters_collection(message, state)


async def process_location(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state != TravelForm.waiting_for_location:
        return
    
    data = await state.get_data()
    session_id = data.get("session_id")
    
    if message.location:
        lat = message.location.latitude
        lon = message.location.longitude
        location = f"{lat}, {lon}"
        await state.update_data(location=location)
        
        if session_id:
            save_location(session_id, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", lat, lon)
        else:
             print("–û—à–∏–±–∫–∞ (–ª–æ–∫–∞—Ü–∏—è): session_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        
        data = await state.get_data()
        question_index = data.get("question_index", 0) + 1
        await state.update_data(question_index=question_index)
        await ask_next_question(message, state)
        return
    
    text_input = message.text.strip()
    
    decimal_pattern = r'^(-?\d+(\.\d+)?)[,\s]+(-?\d+(\.\d+)?)$'
    decimal_match = re.match(decimal_pattern, text_input)
    
    if decimal_match:
        try:
            lat = float(decimal_match.group(1).replace(',', '.'))
            lon = float(decimal_match.group(3).replace(',', '.'))
            
            if not (-90 <= lat <= 90) or not (-180 <= lon <= 180):
                await message.answer("üö® –û—à–∏–±–∫–∞: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.\n–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90, –¥–æ–ª–≥–æ—Ç–∞ –æ—Ç -180 –¥–æ 180.")
                return
            
            location = f"{lat}, {lon}"
            await state.update_data(location=location)
            
            if session_id:
                save_location(session_id, text_input, lat, lon)
            else:
                print("–û—à–∏–±–∫–∞ (–ª–æ–∫–∞—Ü–∏—è): session_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
            
            data = await state.get_data()
            question_index = data.get("question_index", 0) + 1
            await state.update_data(question_index=question_index)
            await ask_next_question(message, state)
            return
        except ValueError:
            pass
    
    coords = rag_service.get_coordinates(text_input)
    
    if not coords:
        await message.answer("üö® –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.")
        return
    
    location = text_input
    await state.update_data(location=location, coords=coords)
    
    if session_id:
        save_location(session_id, text_input, coords[0], coords[1])
    else:
        print("–û—à–∏–±–∫–∞ (–ª–æ–∫–∞—Ü–∏—è): session_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
    
    data = await state.get_data()
    question_index = data.get("question_index", 0) + 1
    await state.update_data(question_index=question_index)
    await ask_next_question(message, state)


async def process_budget(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.
    """
    try:
        budget = float(message.text)
        if budget < 0:
            await message.answer("üö® –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        if budget > 10 ** 6:
            budget = 10 ** 6
    except ValueError:
        await message.answer("üö® –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±—é–¥–∂–µ—Ç–∞.")
        return
    await state.update_data(budget=budget)
    data = await state.get_data()
    question_index = data.get("question_index", 0) + 1
    await state.update_data(question_index=question_index)
    await ask_next_question(message, state)


async def toggle_photo_locations(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ‚Äë–ª–æ–∫–∞—Ü–∏–π.
    """
    data = await state.get_data()
    selected = data.get("photo_locations", [])
    if ":" not in callback.data:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ callback data")
        return
    action, option = callback.data.split(":", 1)
    if action != "toggle_photo_location":
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback.")
        return

    if option == "all":
        if len(selected) == len(PHOTO_OPTIONS):
            selected = []
        else:
            selected = PHOTO_OPTIONS.copy()
    else:
        if option in selected:
            selected.remove(option)
        else:
            selected.append(option)

    await state.update_data(photo_locations=selected)
    try:
        await callback.message.edit_reply_markup(
            reply_markup=get_photo_locations_keyboard(selected, PHOTO_OPTIONS)
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ!")

async def confirm_photo_locations(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ‚Äë–ª–æ–∫–∞—Ü–∏–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.
    """
    await callback.message.edit_reply_markup(reply_markup=None)
    
    data = await state.get_data()
    photo_locations = data.get("photo_locations", [])
    session_id = data.get("session_id")
    
    if session_id:
        for location_type in photo_locations:
            save_photo_location(session_id, location_type)
    else:
        print("–û—à–∏–±–∫–∞ (—Ñ–æ—Ç–æ): session_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
    
    question_index = data.get("question_index", 0) + 1
    await state.update_data(question_index=question_index)
    await callback.answer("–í—ã–±–æ—Ä —Ñ–æ—Ç–æ‚Äë–ª–æ–∫–∞—Ü–∏–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
    await ask_next_question(callback.message, state)

async def toggle_cuisine(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ö–æ–Ω—å.
    """
    data = await state.get_data()
    selected = data.get("cuisine_options", [])
    if ":" not in callback.data:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ callback data")
        return
    action, option = callback.data.split(":", 1)
    if action != "toggle_cuisine":
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback.")
        return

    if option == "all":
        if len(selected) == len(CUISINE_OPTIONS):
            selected = []
        else:
            selected = CUISINE_OPTIONS.copy()
    else:
        if option in selected:
            selected.remove(option)
        else:
            selected.append(option)

    await state.update_data(cuisine_options=selected)
    try:
        await callback.message.edit_reply_markup(
            reply_markup=get_cuisine_keyboard(selected, CUISINE_OPTIONS)
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ!")


async def confirm_cuisine(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –∫—É—Ö–æ–Ω—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.
    """
    await callback.message.edit_reply_markup(reply_markup=None)
    
    data = await state.get_data()
    cuisine_options = data.get("cuisine_options", [])
    session_id = data.get("session_id")
    
    if session_id:
        for cuisine_type in cuisine_options:
            save_cuisine(session_id, cuisine_type)
    
    question_index = data.get("question_index", 0) + 1
    await state.update_data(question_index=question_index)
    await callback.answer("–í—ã–±–æ—Ä –∫—É—Ö–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!")
    await ask_next_question(callback.message, state)

async def process_days(message: types.Message, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """
    try:
        days = int(message.text)
        if days <= 0:
            await message.answer("üö® –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        if days > 7:
            await message.answer("–ù–∞—à –±–æ—Ç —Å–µ–π—á–∞—Å —É–º–µ–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–æ 7 –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –±–æ–ª—å—à–µ 7.")
            return
    except ValueError:
        await message.answer("üö® –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π.")
        return
    await state.update_data(days=days)
    data = await state.get_data()
    question_index = data.get("question_index", 0) + 1
    await state.update_data(question_index=question_index)
    await ask_next_question(message, state)


async def finish_parameters_collection(message: types.Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
    1. –í—ã–≤–æ–¥–∏—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    2. –í—ã–∑—ã–≤–∞–µ—Ç RAG-—Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ POI –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏.
    3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    4. –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    data = await state.get_data()
    session_id = data.get("session_id")
    selected_routes = data.get("selected_routes", {})
    location = data.get("location", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    budget = data.get("budget", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    photo_locations = data.get("photo_locations", [])
    cuisine_options = data.get("cuisine_options", [])
    days = data.get("days", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    
    if session_id:
        save_route_parameters(session_id, budget, days)
        complete_session(session_id)

    response = "‚úÖ –°–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
    response += f"üìç **–õ–æ–∫–∞—Ü–∏—è**: {location}\n"
    response += f"üí∞ **–ë—é–¥–∂–µ—Ç**: {budget} —Ä—É–±.\n"
    response += f"üìÜ **–î–Ω–µ–π**: {days}\n"
    if selected_routes.get("photo"):
        response += f"üì∏ **–§–æ—Ç–æ‚Äë–ª–æ–∫–∞—Ü–∏–∏**: {', '.join(photo_locations) if photo_locations else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
    if selected_routes.get("food"):
        response += f"üçΩÔ∏è **–ö—É—Ö–Ω–∏**: {', '.join(cuisine_options) if cuisine_options else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n"
    response += f"\n–û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ ‚è≥"

    await message.answer(response, parse_mode="Markdown")

    preferences = ["–º—É–∑–µ–∏", "–ø–∞—Ä–∫–∏", "–∫–∞—Ñ–µ"]
    if "," in location:
        try:
            lat_str, lon_str = location.split(",")
            lat = float(lat_str.strip())
            lon = float(lon_str.strip())
            poi_text = rag_service.retrieve_documents(
                location_name="",
                preferences=preferences,
                lat=lat,
                lon=lon
            )
        except Exception:
            poi_text = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    else:
        poi_text = rag_service.retrieve_documents(
            location_name=location,
            preferences=preferences,
            lat=None,
            lon=None
        )

    await message.answer(poi_text)
    await state.clear()
