from collections import deque
from aiogram import types
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from database.db import is_user_admin, get_all_users, set_user_admin
from states.travel_states import TravelForm
from keyboards.inline_keyboards import get_admin_menu_keyboard, get_back_to_main_keyboard

async def show_admin_menu(callback_query: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∞ (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã).
    """
    if not is_user_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    await callback_query.message.edit_reply_markup(
        reply_markup=get_admin_menu_keyboard()
    )
    await callback_query.answer()

async def view_logs(callback_query: types.CallbackQuery):
    if not is_user_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    try:
        with open("bot.log", "r", encoding="utf-8") as f:
            last_lines = deque(f, maxlen=20)
    except FileNotFoundError:
        await callback_query.message.answer("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_back_to_main_keyboard())
        await callback_query.answer()
        return
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}", reply_markup=get_back_to_main_keyboard())
        await callback_query.answer()
        return

    text = "".join(last_lines).strip() or "–õ–æ–≥–∏ –ø—É—Å—Ç—ã."
    await callback_query.message.answer(
        f"<pre>{text}</pre>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_back_to_main_keyboard()
    )
    await callback_query.answer()

async def clear_logs(callback_query: types.CallbackQuery):
    if not is_user_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    try:
        open("bot.log", "w", encoding="utf-8").close()
        await callback_query.message.answer(
            "üóëÔ∏è –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.",
            reply_markup=get_back_to_main_keyboard()
        )
    except Exception as e:
        await callback_query.message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}",
            reply_markup=get_back_to_main_keyboard()
        )
    finally:
        await callback_query.answer()

async def view_users(callback_query: types.CallbackQuery):
    if not is_user_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    users = get_all_users(limit=100)
    if not users:
        await callback_query.message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=get_back_to_main_keyboard()
        )
        await callback_query.answer()
        return

    lines = []
    for u in users:
        uid = u["user_id"]
        username = f"@{u['username']}" if u['username'] else "‚Äî"
        name = f"{u['first_name'] or ''} {u['last_name'] or ''}".strip() or "‚Äî"
        admin_flag = "‚úÖ" if u['is_admin'] else "‚ùå"
        lines.append(f"ID: <b>{uid}</b>, {username}, {name}, Admin: {admin_flag}")

    text = "\n".join(lines)
    chunks = [text[i:i+3800] for i in range(0, len(text), 3800)]
    for idx, chunk in enumerate(chunks):
        if idx == len(chunks) - 1:
            await callback_query.message.answer(
                chunk,
                parse_mode=ParseMode.HTML,
                reply_markup=get_back_to_main_keyboard()
            )
        else:
            await callback_query.message.answer(
                chunk,
                parse_mode=ParseMode.HTML
            )
    await callback_query.answer()

async def make_admin(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_user_admin(callback_query.from_user.id):
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
        return

    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=get_back_to_main_keyboard()
    )
    await TravelForm.waiting_for_admin_id.set()
    await callback_query.answer()

async def process_set_admin(message: types.Message, state: FSMContext):
    if not is_user_admin(message.from_user.id):
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        await state.finish()
        return

    try:
        target_user_id = int(message.text)
        set_user_admin(target_user_id, True)
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <b>{target_user_id}</b> —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_to_main_keyboard()
        )
    except ValueError:
        await message.answer(
            "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.",
            reply_markup=get_back_to_main_keyboard()
        )
    finally:
        await state.finish()